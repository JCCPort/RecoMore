name: Linux

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.lib }}-${{ matrix.gpu }}
    runs-on: ubuntu-latest
    container: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -e -o pipefail {0}
    env:
      CCACHE_DIR: ${{ github.workspace }}/ccache
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu:22.04
        build_type:
          - Release
        lib:
          - shared
        gpu:
          - no-cuda

    steps:
      - name: Setup Dependencies
        run: |
          apt update
          apt install -y software-properties-common
          add-apt-repository ppa:apt-fast/stable
          apt -y install sudo apt-fast

      - uses: actions/checkout@v3
        with:
          path: ceres-solver-dir

      - name: install deps
        run: sudo apt install \
          libxml2 libxml2-dev libboost-all-dev build-essential ccache libbenchmark-dev \
          libblas-dev libeigen3-dev libgflags-dev libgoogle-glog-dev liblapack-dev \
          libmetis-dev libsuitesparse-dev ninja-build libssl-dev git cmake \
          apt-transport-https software-properties-common wget libabsl-dev -y

      - name: Cache Ceres-solver build
        id: cache-ceres-build
        uses: actions/cache@v3
        with:
          path: ceres-solver
          key: ceres-solver-cache
          restore-keys: ceres-solver-cache

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Setup Environment
        run: echo 'CXXFLAGS=-flto' >> $GITHUB_ENV

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Clone ceres-solver
        run: |
          # Clone the Ceres Solver repo WITH submodules
          git clone --recurse-submodules https://ceres-solver.googlesource.com/ceres-solver
          cd ceres-solver
          # Ensure submodules are up to date
          git submodule update --init --recursive
          pwd

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Make build dir
        working-directory: ceres-solver
        run: |
          mkdir build
          mkdir install

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Configure
        working-directory: ceres-solver/build
        run: |
          cmake \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DEXPORT_BUILD_DIR=ON \
            -DBUILD_DEPS=ON \
            -DBUILD_TESTING=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_BENCHMARKS=OFF \
            ..

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Build
        working-directory: ceres-solver/build
        run: make -j4

      - name: Install
        working-directory: ceres-solver/build
        run: sudo make install

      - name: Setup Dependencies
        run: |
          apt update
          apt -y install git curl

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          path: RecoMoreDir
          submodules: recursive

      - name: Add RecoMore build
        working-directory: RecoMoreDir
        run: mkdir RecoMore-build

      - name: Build RecoMore
        working-directory: RecoMoreDir/RecoMore-build
        id: recomore
        run: |
          # Refresh cmake in case needed
          sudo apt-get remove cmake cmake-data -y
          sudo apt-get install cmake cmake-data -y
          
          # Point CMake to the newly installed Ceres
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_PREFIX_PATH=/__w/RecoMore/RecoMore/ceres-solver/install/ \
                ..
          make -j4

      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
        with:
          limit-access-to-actor: true
          limit-access-to-users: JCCPort

      - name: Run tests
        working-directory: RecoMoreDir/RecoMore-build/Tests
        run: |
          ls ..
          ls .
          ls ../TestData
          ./Boost_Tests_run
