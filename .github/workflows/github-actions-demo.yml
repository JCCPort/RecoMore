name: Linux

on: [push, pull_request]

jobs:
  build:
    name: ${{matrix.os}}-${{matrix.build_type}}-${{matrix.lib}}-${{matrix.gpu}}
    runs-on: ubuntu-latest
    container: ${{matrix.os}}
    defaults:
      run:
        shell: bash -e -o pipefail {0}
    env:
      CCACHE_DIR: ${{github.workspace}}/ccache
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu:22.04
        build_type:
          - Release
        lib:
          - shared
        gpu:
          - no-cuda

    steps:
      - uses: actions/checkout@v3

      - name: Setup Dependencies
        run: |
          apt update
          apt full-upgrade -y
          apt install -y sudo
          apt install -y software-properties-common
          add-apt-repository ppa:apt-fast/stable
          apt -y install apt-fast
          
      - uses: actions/checkout@v3
      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libboost-all-dev build-essential ccache libbenchmark-dev libblas-dev libeigen3-dev libgflags-dev libgoogle-glog-dev liblapack-dev libmetis-dev libsuitesparse-dev ninja-build libssl-dev git cmake apt-transport-https software-properties-common wget
          version: 1.0

      - name: Cache Ceres-solver build
        id:  cache-ceres-build
        uses: actions/cache@v3
        with:
          path: ceres-solver
          key: ceres-solver-cache

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Setup Environment
        run: echo 'CXXFLAGS=-flto' >> $GITHUB_ENV

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Clone ceres-solver
        run: git clone https://ceres-solver.googlesource.com/ceres-solver

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Make build dir
        working-directory: ceres-solver
        run: mkdir build

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Configure
        working-directory: ceres-solver/build
        run: cmake ..

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Build
        working-directory: ceres-solver/build
        run: make -j4

      - if: steps.cache-ceres-build.outputs.cache-hit != 'true'
        name: Install
        working-directory: ceres-solver/build
        run: make install

#      - name: Install pwsh
#        run: |
#          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
#          dpkg -i packages-microsoft-prod.deb
#          apt update
#          apt install -y powershell python3-pip
#          PATH=“$PATH:/usr/bin/python3”
#          pip install cmake-common
          

#      - name: Cache boost build
#        id: cache-boost-build
#        uses: actions/cache@v3
#        with:
#          path: /__w/RecoMore/RecoMore/boost
#          key: boost-1.80-cache
#
##      - if: steps.cache-boost-build.outputs.cache-hit != 'true'
##        name: Download boost and make dir
##        run: |
##          wget https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.tar.gz
##          mkdir boost
##          mkdir boost-build
##          mkdir boost-install
##
##      - if: steps.cache-boost-build.outputs.cache-hit != 'true'
##        name: Unzip boost
##        working directory: boost
##        run: |
##          tar --bzip2 -xf ../boost_1_81_0.tar.gz
##          ./bootstrap.sh --prefix=../boost-install --with-libraries=thread serialization test
##          ./bjam install
#
#      - if: steps.cache-boost-build.outputs.cache-hit != 'true'
#        name: Make boost dir
#        run: |
#          mkdir boost
#          pwd
#          ls -lash .
#
#
#      - if: steps.cache-boost-build.outputs.cache-hit != 'true'
#        uses: actions/checkout@v3
#
#      - if: steps.cache-boost-build.outputs.cache-hit != 'true'
#        name: Build Boost
#        id: boost
#        uses: egor-tensin/build-boost@v1.4
#        with:
#          version: 1.80.0
#          libraries: thread serialization test
#          platform: x64
#          configuration: Release
#          directory: /__w/RecoMore/RecoMore/boost
#
#      - name: Print dir 2
#        run: |
#          ls -lash ~/boost
#          pwd
#
#      - name: Print dir 3
#        run: |
#          ls -lash boost
#          pwd

      - name: Make RecoMore build dir
        run: mkdir RecoMore-build

#      - name: Build RecoMore
#        working-directory: RecoMore-build
#        id: recomore
#        run: |
#          cmake ..
#          make -j4
