name: Linux

on: [push, pull_request]

jobs:
  build:
    name: ${{matrix.os}}-${{matrix.build_type}}-${{matrix.lib}}-${{matrix.gpu}}
    runs-on: ubuntu-latest
    container: ${{matrix.os}}
    defaults:
      run:
        shell: bash -e -o pipefail {0}
    env:
      CCACHE_DIR: ${{github.workspace}}/ccache
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu:22.04
        build_type:
          - Release
        lib:
          - shared
        gpu:
          - no-cuda

    steps:
      - uses: actions/checkout@v3

      - name: Setup Dependencies
        run: |
          apt update
          apt full-upgrade -y
          apt install -y \
            build-essential \
            ccache \
            libbenchmark-dev \
            libblas-dev \
            libeigen3-dev \
            libgflags-dev \
            libgoogle-glog-dev \
            liblapack-dev \
            libmetis-dev \
            libsuitesparse-dev \
            ninja-build \
            libssl-dev \
            git \
            cmake \
            apt-transport-https \
            software-properties-common \
            wget

      - name: Setup CUDA toolkit
        if: matrix.gpu == 'cuda'
        run: |
          apt-get install -y \
            nvidia-cuda-dev \
            nvidia-cuda-toolkit


      - name: Cache Build
        id: cache-build
        uses: actions/cache@v3
        with:
          path: ceres-solver
          key: ceres-solver-cache

      - if: steps.cache-build.outputs.cache-hit != 'true'
        name: Setup Environment
        run: echo 'CXXFLAGS=-flto' >> $GITHUB_ENV

      - if: steps.cache-build.outputs.cache-hit != 'true'
        name: Clone ceres-solver
        run: git clone https://ceres-solver.googlesource.com/ceres-solver

      - if: steps.cache-build.outputs.cache-hit != 'true'
        name: Make build dir
        working-directory: ceres-solver
        run: mkdir build

      - if: steps.cache-build.outputs.cache-hit != 'true'
        name: Configure
        working-directory: ceres-solver/build
        run: cmake ..

      - if: steps.cache-build.outputs.cache-hit != 'true'
        name: Build
        working-directory: ceres-solver/build
        run: make -j4

      - if: steps.cache-build.outputs.cache-hit != 'true'
        name: Install
        working-directory: ceres-solver/build
        run: make install

      - name: Install pwsh
        run: |
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          dpkg -i packages-microsoft-prod.deb
          apt-get update
          apt-get install -y powershell python-pip
#          ls -lahs /usr/bin/
          PATH=“$PATH:/usr/bin/python3:/usr/bin/python2”
          python -m ensurepip
          

      - uses: actions/checkout@v3

      - name: Build Boost
        uses: egor-tensin/build-boost@v1.4
        with:
          version: 1.80.0
          libraries: thread serialization test
          platform: x64
          configuration: Release