name: Linux

on: [push, pull_request]

jobs:
  build:
    name: ${{matrix.os}}-${{matrix.build_type}}-${{matrix.lib}}-${{matrix.gpu}}
    runs-on: ubuntu-latest
    container: ${{matrix.os}}
    defaults:
      run:
        shell: bash -e -o pipefail {0}
    env:
      CCACHE_DIR: ${{github.workspace}}/ccache
      CMAKE_GENERATOR: Ninja
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu:22.04
        build_type:
          - Release
        lib:
          - shared
        gpu:
          - no-cuda

    steps:
      - uses: actions/checkout@v3

#      - name: Update apt
#        run: |
#          apt update
#          apt full-upgrade -y
#
#      - uses: actions/checkout@v2
#      - uses: awalsh128/cache-apt-pkgs-action@latest
#        with:
#          packages: curl build-essential ccache libbenchmark-dev libblas-dev libeigen3-dev libgflags-dev libgoogle-glog-dev liblapack-dev libmetis-dev libsuitesparse-dev ninja-build libssl-dev git cmake
#          version: 1.1


      - name: Setup Dependencies
        run: |
          apt update
          apt full-upgrade -y
          apt install -y \
            build-essential \
            ccache \
            libbenchmark-dev \
            libblas-dev \
            libeigen3-dev \
            libgflags-dev \
            libgoogle-glog-dev \
            liblapack-dev \
            libmetis-dev \
            libsuitesparse-dev \
            ninja-build \
            libssl-dev \
            git \
            cmake

#      - name: Cache CMake
#        id: cache-cmake
#        uses: actions/cache@v3
#        env:
#          cache-name: cache-cmake
#        with:
#          path: ~/cmake-3.25.1
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-

#      - if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
#        name: Install CMake
#        run: |
#          apt update
#          apt install wget -y
#          currdir=$(pwd)
#          cd ~
#          wget https://cmake.org/files/v3.25/cmake-3.25.1.tar.gz
#          tar -xzvf cmake-3.25.1.tar.gz
#          cd cmake-3.25.1/
#          ./bootstrap
#          make -j4
#          make install
#          cd $currdir

#      - if: ${{ steps.cache-npm.outputs.cache-hit == 'true' }}
#        name: Restore cached CMake
#        uses: ylemkimon/cache-restore@v2
#        with:
#          path: ~/cmake-3.25.1
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-

      - name: Setup CUDA toolkit
        if: matrix.gpu == 'cuda'
        run: |
          apt-get install -y \
            nvidia-cuda-dev \
            nvidia-cuda-toolkit


      - name: Cache Build
        id: cache-build
        uses: actions/cache@v3
        with:
          path: ${{env.CCACHE_DIR}}
          key: ${{matrix.os}}-ccache-${{matrix.build_type}}-${{matrix.lib}}-${{matrix.gpu}}-${{github.run_id}}
          restore-keys: ${{matrix.os}}-ccache-${{matrix.build_type}}-${{matrix.lib}}-${{matrix.gpu}}-

      - name: Setup Environment
        if: matrix.build_type == 'Release'
        run: |
          echo 'CXXFLAGS=-flto' >> $GITHUB_ENV

      - name: Clone ceres-solver
        run: git clone https://ceres-solver.googlesource.com/ceres-solver

      - name: wots dere
        working-directory: ceres-solver
        run: ls -laht && pwd

      - name: Make build dir
        working-directory: ceres-solver
        run: mkdir build

      - name: Configure
        working-directory: ceres-solver/build
        run: |
          cmake -DBUILD_SHARED_LIBS=${{matrix.lib == 'shared'}} \
                -DUSE_CUDA=${{matrix.gpu == 'cuda'}} \
                -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                -DCMAKE_C_COMPILER_LAUNCHER=$(which ccache) \
                -DCMAKE_CXX_COMPILER_LAUNCHER=$(which ccache) \
                -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install ..

      - name: wots dere 2
        working-directory: ceres-solver/build
        run: ls -laht && pwd

      - name: Build
        working-directory: ceres-solver/build
        run: make -j4

      - name: Install
        working-directory: ceres-solver/build
        run: make install

      - name: Build Boost
        uses: egor-tensin/build-boost@v1.4
        with:
          version: 1.80.0
          libraries: thread serialization test
          platform: x64
          configuration: Release